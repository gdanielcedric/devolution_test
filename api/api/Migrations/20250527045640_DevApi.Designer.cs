// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Contexts;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20250527045640_DevApi")]
    partial class DevApi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.AssurProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_assurproduct");

                    b.HasIndex(new[] { "Id" }, "assurproduct_pk")
                        .IsUnique();

                    b.ToTable("assurproduct", (string)null);
                });

            modelBuilder.Entity("api.Models.CategoryVehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssurProductId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_categoryvehicle");

                    b.HasIndex("AssurProductId");

                    b.HasIndex(new[] { "Id" }, "categoryvehicle_pk")
                        .IsUnique();

                    b.ToTable("categoryvehicle", (string)null);
                });

            modelBuilder.Entity("api.Models.Guaranty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssurProductId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuarantyType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssurProductId");

                    b.ToTable("Guaranty");

                    b.HasDiscriminator<string>("GuarantyType").HasValue("Guaranty");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("api.Models.Subscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdAssurProduct")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdSubscriber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdVehicle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("quoteReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_subscription");

                    b.HasIndex(new[] { "IdAssurProduct" }, "assurproduct_fk");

                    b.HasIndex(new[] { "Id" }, "subscription_pk")
                        .IsUnique();

                    b.HasIndex(new[] { "IdSubscriber" }, "suscriber_fk");

                    b.HasIndex(new[] { "IdVehicle" }, "vehicle_fk");

                    b.ToTable("subscription", (string)null);
                });

            modelBuilder.Entity("api.Models.Suscriber", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CNI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_suscriber");

                    b.HasIndex(new[] { "Id" }, "suscriber_pk")
                        .IsUnique();

                    b.ToTable("suscriber", (string)null);
                });

            modelBuilder.Entity("api.Models.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Couleur")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateFirstCirculation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IdCategoryVehicle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdSuscriber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImmatriculationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NombrePorte")
                        .HasColumnType("integer");

                    b.Property<int>("NombreSiege")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_vehicle");

                    b.HasIndex(new[] { "IdCategoryVehicle" }, "categoryvehicle_fk");

                    b.HasIndex(new[] { "IdSuscriber" }, "suscriber_fk")
                        .HasDatabaseName("suscriber_fk1");

                    b.HasIndex(new[] { "Id" }, "vehicle_pk")
                        .IsUnique();

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("api.Models.CollisionTierceGuaranty", b =>
                {
                    b.HasBaseType("api.Models.Guaranty");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.ToTable("Guaranty", t =>
                        {
                            t.Property("Value")
                                .HasColumnName("CollisionTierceGuaranty_Value");
                        });

                    b.HasDiscriminator().HasValue("TIERCE_COLLISION");
                });

            modelBuilder.Entity("api.Models.DamageGuaranty", b =>
                {
                    b.HasBaseType("api.Models.Guaranty");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("DAMAGES");
                });

            modelBuilder.Entity("api.Models.IncendieGuaranty", b =>
                {
                    b.HasBaseType("api.Models.Guaranty");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.ToTable("Guaranty", t =>
                        {
                            t.Property("Value")
                                .HasColumnName("IncendieGuaranty_Value");
                        });

                    b.HasDiscriminator().HasValue("INCENDIE");
                });

            modelBuilder.Entity("api.Models.PlafondTierceGuaranty", b =>
                {
                    b.HasBaseType("api.Models.Guaranty");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.ToTable("Guaranty", t =>
                        {
                            t.Property("Value")
                                .HasColumnName("PlafondTierceGuaranty_Value");
                        });

                    b.HasDiscriminator().HasValue("TIERCE_PLAFONNEE");
                });

            modelBuilder.Entity("api.Models.RCGuaranty", b =>
                {
                    b.HasBaseType("api.Models.Guaranty");

                    b.Property<int>("FiscalPower")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("RC");
                });

            modelBuilder.Entity("api.Models.VolGuaranty", b =>
                {
                    b.HasBaseType("api.Models.Guaranty");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.ToTable("Guaranty", t =>
                        {
                            t.Property("Value")
                                .HasColumnName("VolGuaranty_Value");
                        });

                    b.HasDiscriminator().HasValue("VOL");
                });

            modelBuilder.Entity("api.Models.CategoryVehicle", b =>
                {
                    b.HasOne("api.Models.AssurProduct", null)
                        .WithMany("Categories")
                        .HasForeignKey("AssurProductId");
                });

            modelBuilder.Entity("api.Models.Guaranty", b =>
                {
                    b.HasOne("api.Models.AssurProduct", null)
                        .WithMany("Garanties")
                        .HasForeignKey("AssurProductId");
                });

            modelBuilder.Entity("api.Models.AssurProduct", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Garanties");
                });
#pragma warning restore 612, 618
        }
    }
}
