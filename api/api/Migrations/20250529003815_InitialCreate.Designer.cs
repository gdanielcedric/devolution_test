// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Contexts;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20250529003815_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.DTO.Subscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdAssurProduct")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdSubscriber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdVehicle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("QuoteReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_subscription");

                    b.HasIndex(new[] { "IdAssurProduct" }, "assurproduct_fk");

                    b.HasIndex(new[] { "Id" }, "subscription_pk")
                        .IsUnique();

                    b.HasIndex(new[] { "IdSubscriber" }, "suscriber_fk");

                    b.HasIndex(new[] { "IdVehicle" }, "vehicle_fk");

                    b.ToTable("subscription", "public");
                });

            modelBuilder.Entity("api.Models.AssurProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Categories")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Garanties")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_assurproduct");

                    b.HasIndex(new[] { "Id" }, "assurproduct_pk")
                        .IsUnique();

                    b.ToTable("assurproduct", "public");
                });

            modelBuilder.Entity("api.Models.CategoryVehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_categoryvehicle");

                    b.HasIndex(new[] { "Id" }, "categoryvehicle_pk")
                        .IsUnique();

                    b.ToTable("categoryvehicle", "public");
                });

            modelBuilder.Entity("api.Models.Suscriber", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CNI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_suscriber");

                    b.HasIndex(new[] { "Id" }, "suscriber_pk")
                        .IsUnique();

                    b.ToTable("suscriber", "public");
                });

            modelBuilder.Entity("api.Models.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Couleur")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateFirstCirculation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FiscalPower")
                        .HasColumnType("integer");

                    b.Property<string>("IdCategoryVehicle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdSuscriber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImmatriculationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NombrePorte")
                        .HasColumnType("integer");

                    b.Property<int>("NombreSiege")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ValueNeuve")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueVenale")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasName("pk_vehicle");

                    b.HasIndex(new[] { "IdCategoryVehicle" }, "categoryvehicle_fk");

                    b.HasIndex(new[] { "IdSuscriber" }, "suscriber_fk")
                        .HasDatabaseName("suscriber_fk1");

                    b.HasIndex(new[] { "Id" }, "vehicle_pk")
                        .IsUnique();

                    b.ToTable("vehicle", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
